//DUT
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 29.12.2024 15:31:19
// Design Name: 
// Module Name: FSM_101
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module seq_101(input clk,rst,seq_in,output reg det_out);
 reg[1:0] ps,ns;
 //state encoding
 parameter idle=2'b00;
 parameter s1=2'b01;
 parameter s10=2'b10;
 
 //state register
 always@(posedge clk)
 begin
 if(rst)
 ps<=idle;
 else
 ps<=ns;
 end
 always@(ps,seq_in)
 begin
 case(ps)
 idle:if(seq_in) begin ns=s1;det_out=0;end
 else begin ns=idle;det_out=0;end
 s1:if(seq_in) begin ns=s1;det_out=0;end
 else begin ns=s10;det_out=0;end
 s10:if(seq_in) begin ns=s1;det_out=1;end
 else begin ns=idle;det_out=0;end
 default:begin ns=idle;det_out=0;end
 endcase
 end
endmodule


//Testbecnch
module seq_tb;
 reg clk,rst,seq_in;
 wire det_out;
 seq_101 dut(clk,rst,seq_in,det_out);
 initial begin
 clk=0;rst=1;
 #10 rst=0;
 seq_in=0;
 #10 seq_in=1;
 #10 seq_in=0;
 #10 seq_in=1;
 #10 seq_in=0;
 #10 seq_in=1;
 #10 seq_in=0;
 #10 seq_in=1;
 
 #20 $finish;
 end
 always #5 clk=~clk;
26
 initial begin
 $dumpfile("dumpfile.vcd");
 $dumpvars(0,clk,rst,seq_in,det_out,dut.ps,dut.ns);
 end
endmodule
